import React, { useState, useEffect } from 'react';
import {
  Box, Button, Table, Thead, Tbody, Tr, Th, Td, Spinner,
  useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader,
  ModalCloseButton, ModalBody, ModalFooter, FormControl,
  FormLabel, Input, Select, FormErrorMessage, useToast
} from '@chakra-ui/react';
import axios from 'axios';

export default function UsersAdmin() {
  const [users, setUsers] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [positions, setPositions] = useState([]);
  const [loading, setLoading] = useState(true);
  const toast = useToast();

  const { isOpen, onOpen, onClose } = useDisclosure();
  const [editing, setEditing] = useState(null);

  const [form, setForm] = useState({
    fullName: '', email: '', password: '',
    roleId: '', departmentId: '', positionId: ''
  });
  const [errors, setErrors] = useState({
    fullName: '', email: '', password: '',
    roleId: '', positionId: ''
  });

  const roles = [
    { value: 3, label: '–ê–¥–º–∏–Ω' },
    { value: 1, label: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å' },
    { value: 2, label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' },
  ];

  useEffect(() => {
    async function fetchAll() {
      try {
        const [u, d, p] = await Promise.all([
          axios.get('/api/admin/users'),
          axios.get('/api/admin/departments'),
          axios.get('/api/admin/positions'),
        ]);
        setUsers(u.data);
        setDepartments(d.data);
        setPositions(p.data);
      } catch (err) {
        toast({ status: 'error', description: err.message });
      } finally {
        setLoading(false);
      }
    }
    fetchAll();
  }, []);

  const refresh = async () => {
    setLoading(true);
    const res = await axios.get('/api/admin/users');
    setUsers(res.data);
    setLoading(false);
  };

  const openCreate = () => {
    setEditing(null);
    setForm({ fullName:'', email:'', password:'', roleId:'', departmentId:'', positionId:'' });
    setErrors({ fullName:'', email:'', password:'', roleId:'', positionId:'' });
    onOpen();
  };

  const openEdit = (u) => {
    setEditing(u);
    setForm({
      fullName: u.name,
      email: u.email,
      password: '',
      roleId: u.roleId.toString(),
      departmentId: u.departmentId?.toString() || '',
      positionId: u.positionId.toString()
    });
    setErrors({ fullName:'', email:'', password:'', roleId:'', positionId:'' });
    onOpen();
  };

  const handleDelete = async (id) => {
    await axios.delete(`/api/admin/users/${id}`);
    toast({ status: 'success', description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
    refresh();
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validate = () => {
    const errs = { fullName: '', email: '', password: '', roleId: '', positionId: '' };

    const name = form.fullName.trim();
    if (!name) {
      errs.fullName = '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else {
      const words = name.split(/\s+/);
      const invalidChars = /[^A-Za-z–ê-–Ø–∞-—è–Å—ë\s]/;
      const hasDigits = /\d/;

      if (words.length < 2) {
        errs.fullName = '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞';
      } else if (hasDigits.test(name)) {
        errs.fullName = '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã';
      } else if (invalidChars.test(name)) {
        errs.fullName = '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã';
      } else if (!words.every(w => /^[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+$/.test(w))) {
        errs.fullName = '–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã';
      }
    }

    // === Email ===
    if (!form.email.trim()) {
      errs.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      errs.email = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }

    // === –ü–∞—Ä–æ–ª—å ===
    const password = form.password;

    if (!editing) {
      if (!password) {
        errs.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      } else if (password.length < 8) {
        errs.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 8 —Å–∏–º–≤–æ–ª–æ–≤';
      } else if (!/[A-Z]/.test(password)) {
        errs.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É';
      } else if (!/^[A-Za-z0-9_\-&$]+$/.test(password)) {
        errs.password = '–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, -, &, $';
      }
    } else if (password) {
      if (password.length < 8) {
        errs.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 8 —Å–∏–º–≤–æ–ª–æ–≤';
      } else if (!/[A-Z]/.test(password)) {
        errs.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É';
      } else if (!/^[A-Za-z0-9_\-&$]+$/.test(password)) {
        errs.password = '–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _, -, &, $';
      }
    }

    if (!form.roleId) errs.roleId = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å';
    if (!form.positionId) errs.positionId = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å';

    setErrors(errs);
    return !Object.values(errs).some(e => e);
  };

  const handleSubmit = async () => {
    if (!validate()) return;

    const payload = {
      fullName: form.fullName,
      email:    form.email,
      roleId:   Number(form.roleId),
      positionId: Number(form.positionId),
      ...(form.departmentId ? { departmentId: Number(form.departmentId) } : {}),
      ...(form.password ? { password: form.password } : {})
    };

    try {
      if (editing) {
        await axios.put(`/api/admin/users/${editing.id}`, payload);
      } else {
        await axios.post('/api/admin/users', payload);
      }
      toast({ status: 'success', description: editing ? '–û–±–Ω–æ–≤–ª–µ–Ω–æ' : '–°–æ–∑–¥–∞–Ω–æ' });
      onClose();
      refresh();
    } catch (err) {
      const msg = err.response?.data?.title || '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ';
      toast({ status: 'error', description: msg });
    }
  };

  return (
    <Box p={4}>
      <Button colorScheme="blue" mb={4} onClick={openCreate}>
        {editing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
      </Button>

      {loading
        ? <Spinner />
        : (
          <Table variant="simple">
            <Thead>
              <Tr>
                <Th>–ò–º—è</Th><Th>Email</Th><Th>–†–æ–ª—å</Th>
                <Th>–û—Ç–¥–µ–ª</Th><Th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</Th><Th>–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</Th>
              </Tr>
            </Thead>
            <Tbody>
              {users.map(u => (
                <Tr key={u.id}>
                  <Td>{u.name}</Td>
                  <Td>{u.email}</Td>
                  <Td>{u.roleName}</Td>
                  <Td>{u.departmentName || '‚Äî'}</Td>
                  <Td>{u.positionName}</Td>
                  <Td>
                    <Button size="sm" mr={2} onClick={() => openEdit(u)}>‚úèÔ∏è</Button>
                    <Button size="sm" colorScheme="red" onClick={() => handleDelete(u.id)}>üóëÔ∏è</Button>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
        )
      }

      <Modal isOpen={isOpen} onClose={onClose} size="md">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>
            {editing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {/* –ò–º—è */}
            <FormControl mb={3} isRequired isInvalid={!!errors.fullName}>
              <FormLabel>–§–∞–º–∏–ª–∏—è –∏ –∏–º—è</FormLabel>
              <Input
                value={form.fullName}
                onChange={e => setForm({ ...form, fullName: e.target.value })}
              />
              <FormErrorMessage>{errors.fullName}</FormErrorMessage>
            </FormControl>

            {/* Email */}
            <FormControl mb={3} isRequired isInvalid={!!errors.email}>
              <FormLabel>Email</FormLabel>
              <Input
                type="email"
                value={form.email}
                onChange={e => setForm({ ...form, email: e.target.value })}
              />
              <FormErrorMessage>{errors.email}</FormErrorMessage>
            </FormControl>

            {/* –ü–∞—Ä–æ–ª—å */}
            <FormControl mb={3} isRequired={!editing} isInvalid={!!errors.password}>
              <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
              <Input
                type="password"
                value={form.password}
                onChange={e => setForm({ ...form, password: e.target.value })}
              />
              <FormErrorMessage>{errors.password}</FormErrorMessage>
            </FormControl>

            {/* –†–æ–ª—å */}
            <FormControl mb={3} isRequired isInvalid={!!errors.roleId}>
              <FormLabel>–†–æ–ª—å</FormLabel>
              <Select
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å"
                value={form.roleId}
                onChange={e => setForm({ ...form, roleId: e.target.value })}
              >
                {roles.map(r => (
                  <option key={r.value} value={r.value}>{r.label}</option>
                ))}
              </Select>
              <FormErrorMessage>{errors.roleId}</FormErrorMessage>
            </FormControl>

            {/* –û—Ç–¥–µ–ª */}
            <FormControl mb={3}>
              <FormLabel>–û—Ç–¥–µ–ª</FormLabel>
              <Select
                placeholder="–ë–µ–∑ –æ—Ç–¥–µ–ª–∞"
                value={form.departmentId}
                onChange={e => setForm({ ...form, departmentId: e.target.value })}
              >
                {departments.map(d => (
                  <option key={d.id} value={d.id}>{d.name}</option>
                ))}
              </Select>
            </FormControl>

            {/* –î–æ–ª–∂–Ω–æ—Å—Ç—å */}
            <FormControl mb={3} isRequired isInvalid={!!errors.positionId}>
              <FormLabel>–î–æ–ª–∂–Ω–æ—Å—Ç—å</FormLabel>
              <Select
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
                value={form.positionId}
                onChange={e => setForm({ ...form, positionId: e.target.value })}
              >
                {positions.map(p => (
                  <option key={p.id} value={p.id}>{p.name}</option>
                ))}
              </Select>
              <FormErrorMessage>{errors.positionId}</FormErrorMessage>
            </FormControl>
          </ModalBody>

          <ModalFooter>
            <Button colorScheme="blue" mr={3} onClick={handleSubmit}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
            <Button onClick={onClose}>–û—Ç–º–µ–Ω–∞</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
}